# -*- coding: utf-8 -*-
"""functions.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BoKvgeMie0U31qOWGjmilmox6PLGw1gm
"""

import pandas as pd
from sklearn.linear_model import Ridge, BayesianRidge
#pip install pycaret
from sklearn.metrics import mean_absolute_error, r2_score
from pycaret.regression import *
from sklearn.feature_selection import SelectKBest, mutual_info_regression

# Load CSVs
dev_set = pd.read_csv('development_final_data.csv')
val_set = pd.read_csv('evaluation_final_data.csv')

"""Use PyCaret to split the data in order to preserve some blance regarding the BMI.
Note that variables "sex", "age" are known confounding factors regarding BMI and for this reason they will be excluded for now. Also, Project ID, possibly indicates the experimantal batch from where the samples were derived, and since the various circumstances could influence the results, this column will also be used as a confounding factor.

1. Establish a baseline model
"""

# Define features and target
numeric_cols = dev_set.select_dtypes(include='number').columns.tolist()
exclude_cols = ['Sex', 'Host age', 'BMI', 'Project ID']
confounding_factors = ['Sex', 'Host age', 'Project ID'] #exclude confounding factors
bacterial_cols = [col for col in numeric_cols if col not in exclude_cols]

all_features = bacterial_cols + exclude_cols

# Setup PyCaret for regression, using all features
reg_setup = setup(data=dev_set,
                  target='BMI',
                  train_size=0.8,
                  session_id=42,
                  ignore_features=confounding_factors)

# Train models on selected features
elastic_net = create_model('en')
ridge = create_model('ridge')
bayesian_ridge = create_model('br')

# Get the test dataset split by PyCaret
test_data = get_config('X_test')
test_target = get_config('y_test')

# Evaluate models properly
pred_en = predict_model(elastic_net, data=test_data)
pred_ridge = predict_model(ridge, data=test_data)
pred_br = predict_model(bayesian_ridge, data=test_data)

# Compute evaluation metrics
rmse_en = mean_squared_error(test_target, pred_en['prediction_label'], squared=False)
mae_en = mean_absolute_error(test_target, pred_en['prediction_label'])
r2_en = r2_score(test_target, pred_en['prediction_label'])

rmse_ridge = mean_squared_error(test_target, pred_ridge['prediction_label'], squared=False)
mae_ridge = mean_absolute_error(test_target, pred_ridge['prediction_label'])
r2_ridge = r2_score(test_target, pred_ridge['prediction_label'])

rmse_br = mean_squared_error(test_target, pred_br['prediction_label'], squared=False)
mae_br = mean_absolute_error(test_target, pred_br['prediction_label'])
r2_br = r2_score(test_target, pred_br['prediction_label'])

# Print RMSE, MAE, and R2 values
print(f"Elastic Net - RMSE: {rmse_en}, MAE: {mae_en}, R2: {r2_en}")
print(f"Ridge Regression - RMSE: {rmse_ridge}, MAE: {mae_ridge}, R2: {r2_ridge}")
print(f"Bayesian Ridge - RMSE: {rmse_br}, MAE: {mae_br}, R2: {r2_br}")

"""2. Feature selection

Will keep the features that show variance that could indicate what are the species that somehow relate to BMI, since low variance species will give no extra useful information for our algorithm.
"""

# Apply feature selection using SelectKBest with f_regression
X = dev_set[bacterial_cols]
y = dev_set['BMI']
k_best = min(10, len(bacterial_cols))  # Select the top 10 features or fewer if there are less
selector = SelectKBest(score_func=mutual_info_regression, k=k_best)
X_selected = selector.fit_transform(X, y)
selected_feature_names = [bacterial_cols[i] for i in selector.get_support(indices=True)]

# Create a new dataset with selected features
dev_set_selected = pd.concat([dev_set[selected_feature_names], dev_set[['BMI']]], axis=1)

# Setup PyCaret for regression using selected features
reg_setup = setup(data=dev_set_selected,
                  target='BMI',
                  train_size=0.8,
                  session_id=42)

# Train models on selected features
elastic_net = create_model('en')
ridge = create_model('ridge')
bayesian_ridge = create_model('br')

# Get the test dataset split by PyCaret
test_data = get_config('X_test')
test_target = get_config('y_test')

# Evaluate models properly
pred_en = predict_model(elastic_net, data=test_data)
pred_ridge = predict_model(ridge, data=test_data)
pred_br = predict_model(bayesian_ridge, data=test_data)

# Compute evaluation metrics
rmse_en = mean_squared_error(test_target, pred_en['prediction_label'], squared=False)
mae_en = mean_absolute_error(test_target, pred_en['prediction_label'])
r2_en = r2_score(test_target, pred_en['prediction_label'])

rmse_ridge = mean_squared_error(test_target, pred_ridge['prediction_label'], squared=False)
mae_ridge = mean_absolute_error(test_target, pred_ridge['prediction_label'])
r2_ridge = r2_score(test_target, pred_ridge['prediction_label'])

rmse_br = mean_squared_error(test_target, pred_br['prediction_label'], squared=False)
mae_br = mean_absolute_error(test_target, pred_br['prediction_label'])
r2_br = r2_score(test_target, pred_br['prediction_label'])

# Print RMSE, MAE, and R2 values
print(f"Elastic Net - RMSE: {rmse_en}, MAE: {mae_en}, R2: {r2_en}")
print(f"Ridge Regression - RMSE: {rmse_ridge}, MAE: {mae_ridge}, R2: {r2_ridge}")
print(f"Bayesian Ridge - RMSE: {rmse_br}, MAE: {mae_br}, R2: {r2_br}")

"""3. Evaluation"""

# Apply feature selection using SelectKBest with mutual_info_regression
X = val_set[bacterial_cols]
y = val_set['BMI']
k_best = min(10, len(bacterial_cols))  # Select the top 10 features or fewer if there are less
selector = SelectKBest(score_func=mutual_info_regression, k=k_best)
X_selected = selector.fit_transform(X, y)
selected_feature_names = [bacterial_cols[i] for i in selector.get_support(indices=True)]

# Create a new dataset with selected features
val_set_selected = pd.concat([val_set[selected_feature_names], val_set[['BMI']]], axis=1)

# Train models on validation set
elastic_net = ElasticNet().fit(val_set_selected[selected_feature_names], val_set_selected['BMI'])
ridge = Ridge().fit(val_set_selected[selected_feature_names], val_set_selected['BMI'])
bayesian_ridge = BayesianRidge().fit(val_set_selected[selected_feature_names], val_set_selected['BMI'])

# Make predictions
pred_en = elastic_net.predict(val_set_selected[selected_feature_names])
pred_ridge = ridge.predict(val_set_selected[selected_feature_names])
pred_br = bayesian_ridge.predict(val_set_selected[selected_feature_names])

# Compute evaluation metrics
rmse_en = mean_squared_error(val_set_selected['BMI'], pred_en, squared=False)
mae_en = mean_absolute_error(val_set_selected['BMI'], pred_en)
r2_en = r2_score(val_set_selected['BMI'], pred_en)

rmse_ridge = mean_squared_error(val_set_selected['BMI'], pred_ridge, squared=False)
mae_ridge = mean_absolute_error(val_set_selected['BMI'], pred_ridge)
r2_ridge = r2_score(val_set_selected['BMI'], pred_ridge)

rmse_br = mean_squared_error(val_set_selected['BMI'], pred_br, squared=False)
mae_br = mean_absolute_error(val_set_selected['BMI'], pred_br)
r2_br = r2_score(val_set_selected['BMI'], pred_br)

# Print RMSE, MAE, and R2 values
print(f"Elastic Net - RMSE: {rmse_en}, MAE: {mae_en}, R2: {r2_en}")
print(f"Ridge Regression - RMSE: {rmse_ridge}, MAE: {mae_ridge}, R2: {r2_ridge}")
print(f"Bayesian Ridge - RMSE: {rmse_br}, MAE: {mae_br}, R2: {r2_br}")